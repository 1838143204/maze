# <center>迷宫实验报告

### <center>小组成员:刘福炜 李雨豪 赖发尧</center>

[<center>GitHub传送门</center>](https://github.com/1838143204/maze)

<font size=5>实验内容简介</font>

> 基本要求:

从文件中读出迷宫数据,寻找并打印出路径通路;储存迷宫数据到文件.

文件中迷宫数据格式为:

长 宽 入口 出口 迷宫的地图数据

迷宫地图数据由01二进制组成,1表示墙壁,0表示通路

> 中级要求:

寻找多入口多出口地图的所有通路

>高级要求:

自动生成迷宫地图

<font size=5>程序设计思路</font>

从入口进行探索式遍历:分别向上下左右四个方向进行搜索,若不是墙则继续走,直到碰到墙或者遇到出口



<font size=5> 算法分析与设计</font>

<font size=4>概念:</font>

> 可行方向:从当前位置出发,如果向相邻的位置行走,不会撞墙,且保证不会越界,则称该方向为当前节点的可行方向

> 可行节点:入口或者中间节点(经过该节点有到达入口和出口的通路),可行节点有两个不同的可行方向,且沿可行方向到达的下一个节点是可行节点

> 可行路径:从入口到出口的通路,连接所有可行节点

<font size=4>算法:</font>

> 利用递归的思想,从入口出发,如果该节点可行方向上的下一个节点是可行节点,则该节点是可行节点.
即可以定义递归函数,使其返回值为该节点的可行状态(是否为可行节点),并递归调用该函数,使该节点记录其他方向(除来时的方向)下一节点的可行状态,
并使该节点的可行状态改变为其余方向可行状态的并(即:当前节点可行状态=左边节点可行状态∪右边节点可行状态∪上方节点可行状态∪下方节点可行状态)

<font size=5>数据结构设计</font>

```C++
class node{
    public:
    bool state;//记录节点的状态(墙或通路)
    bool flag;//记录该节点是否是可行节点
    bool up;//向上是否可以出去
    bool down;//向下是否可以出去
    bool left;//向左是否可以出去
    bool right;//向右是否可以出去
    private:
    node();//构造函数
    bool GetState(){return state};//查看该位置是否可行走
    void ChangeState(bool new_taste){state=new_state};//改变该位置的状态,用于生成迷宫
    void ChangeFlag(bool new_flag){flag=new_flag};//改变该位置的可行状态,用于找寻通路
}
```

